//-- Includes ------------------------------------------------------------
#define FASTLED_ESP8266_RAW_PIN_ORDER
#include <FastLED.h>
#include <ESP8266WiFi.h>
#include <ArduinoWebsockets.h>
#include "credentials.h"
#include <string.h>
#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
//SnackBot
#define SERVOMIN  125 //can be adjusted
#define SERVOMAX  575 //can be adjusted
//DrinkBot
#define LED_PIN   14
#define NUM_LEDS  8
#define LED_Delay 1000
#define LED_OFF   0
#define LED_ON    1

//-- Structs ------------------------------------------------------------
typedef struct {
  char custom_reward_id[501];
  char badges[101]; //Variable size
  char display_name[51];
  char emotes[101]; //Variable size
  char flags[51]; //Variable size
  char user_type[51];//Variable size
  char badge_info[21];
  char color[8];
  char message_id[37];
  char room_id[100];
  char tmi_sent_ts[14];
  char user_id[10];
  int is_turbo;
  int is_mod;
  int is_subscriber;
  char users_message[501];
  char message_type_id[51];
  int is_emote_only;
  int is_highlighted_message;
} ChatMessage_t;


//-- Variables -----------------------------------------------------------

//LED
CRGB leds[NUM_LEDS];

//SnackBot
volatile int snackBot_RemainingCycles = 0;

//DrinkBot
volatile int drinkBot_RemainingCycles = 0;

//Websocket / Twitch
using namespace websockets;
WebsocketsClient websocketClient;
ChatMessage_t chatMessageStruct = {0};
char lastMessageTime[14]= {0};

#define DRINK_REWARD_ID ""
#define SNACK_REWARD_ID ""

//DrinkBot
int led = 16;

//Snackbot
int sda = 4;
int scl = 5;

int Axis_1_Angle = 180; //rotating base
int Axis_2_Angle = 90; //lower arm
int Axis_3_Angle = 90; //horizontal arm
int Axis_4_Angle = 90; // ass
int Axis_5_Angle = 100; //pincher
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x40, Wire);


int angleToPulse(int ang) {
  int pulse = map(ang, 0, 180, SERVOMIN, SERVOMAX); // map angle of 0 to 180 to Servo min and Servo max
  Serial.print("Angle: "); Serial.print(ang);
  Serial.print(" pulse: "); Serial.println(pulse);
  return pulse;
}



//Prototypes
void connectToWifi(const char * wifi_ssid, const char * wifi_passwd);
void connectToTwitchWebSocket(WebsocketsClient * webSocketClientPtr);
void parseChatMessage(ChatMessage_t * chatMessageStructPtr, char * twitchChatMessage);
void sendTwitchMessage(char * message);
void SnackBot_Pick();
void DrinkBot_Fill();
void LED_Control(int state);


//-- Websocket / Twitch -----------------------------------------------------------
void connectToWifi(const char * wifi_ssid, const char * wifi_passwd) {
  Serial.begin(115200);
  Serial.println();

  WiFi.begin(wifi_ssid, wifi_passwd);

  Serial.print("Connecting");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println();

  Serial.print("Connected, IP address: ");
  Serial.println(WiFi.localIP());
}

void connectToTwitchWebSocket(WebsocketsClient * webSocketClientPtr) {
  bool isConnected = webSocketClientPtr->connect(TWITCH_WEBSOCKET_URL);
  while (!isConnected) {
    Serial.print("Failed Connection To: "); Serial.println(TWITCH_WEBSOCKET_URL); Serial.println("Trying Again...");
    isConnected = webSocketClientPtr->connect(TWITCH_WEBSOCKET_URL);
  }

  //Initial Handshake for Twitch WebSocket
  webSocketClientPtr->send("CAP REQ :twitch.tv/tags twitch.tv/commands");
  webSocketClientPtr->send(TWITCH_OAUTH_TOKEN);
  webSocketClientPtr->send(USERNAME);
  webSocketClientPtr->send(JOIN_CHANNEL_NAME);

  //Let the channel you are connecting to know with a message.
#ifdef SETTINGS_MESSAGE_ON_CONNECT
  webSocketClientPtr->send(MESSAGE_ON_CONNECT);
  Serial.println("Sent Message To Channel: ");
  Serial.println(MESSAGE_ON_CONNECT);
#endif

  Serial.println("Connected To WebSocket Server: "); Serial.println(TWITCH_WEBSOCKET_URL);
}

void sendTwitchMessage(char * message) {
  char twitchMessageFormatted[1000];
  strcat(twitchMessageFormatted, MESSAGE_ON_CONNECT_PREFIX);
  strcat(twitchMessageFormatted, SETTINGS_JOIN_CHANNEL_NAME);
  strcat(twitchMessageFormatted, " :");
  strcat(twitchMessageFormatted, message);
  websocketClient.send(twitchMessageFormatted);
}

void parseChatMessage(ChatMessage_t * chatMessageStructPtr, char * twitchChatMessage) {
  if (!strstr(twitchChatMessage, "PRIVMSG")) {
    return;
  }

  *chatMessageStructPtr = {0};
  char * chatMessageCpy = strdup(twitchChatMessage);
  char attributeName[51] = {0};
  char * cSplitPtr;

  cSplitPtr = strtok(chatMessageCpy, ";");
  while (cSplitPtr != NULL) {
    //Parse the attribute name and attribute data
    sscanf(cSplitPtr, "%50[^=]", attributeName);

    if (strcmp(attributeName, "@badge-info") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%20[^;]s", chatMessageStructPtr->badge_info);
    } else if (strcmp(attributeName, "badges") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%100[^;]s", chatMessageStructPtr->badges);
    } else if (strcmp(attributeName, "custom-reward-id") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%100[^;]s", chatMessageStructPtr->custom_reward_id);
    } else if (strcmp(attributeName, "color") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%7[^;]s", chatMessageStructPtr->color);
    } else if (strcmp(attributeName, "display-name") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%50[^;]s", chatMessageStructPtr->display_name);
    } else if (strcmp(attributeName, "emotes") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%100[^;]s", chatMessageStructPtr->emotes);
    } else if (strcmp(attributeName, "flags") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%50[^;]s", chatMessageStructPtr->flags);
    } else if (strcmp(attributeName, "msg-id") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%50[^;]s", chatMessageStructPtr->message_type_id);
      if (strcmp(chatMessageStructPtr->message_type_id, "highlighted-message") == 0) {
        chatMessageStructPtr->is_highlighted_message = 1;
      }
    } else if (strcmp(attributeName, "id") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%36[^;]s", chatMessageStructPtr->message_id);
    } else if (strcmp(attributeName, "mod") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%d", &(chatMessageStructPtr->is_mod));
    } else if (strcmp(attributeName, "room-id") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%100[^;]s", chatMessageStructPtr->room_id);
    } else if (strcmp(attributeName, "subscriber") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%d", &(chatMessageStructPtr->is_subscriber));
    } else if (strcmp(attributeName, "user-id") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%9[^;]s", chatMessageStructPtr->user_id);
    } else if (strcmp(attributeName, "user-type") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%50[^:]s", chatMessageStructPtr->user_type);
    } else if (strcmp(attributeName, "turbo") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%d", &(chatMessageStructPtr->is_turbo));
    } else if (strcmp(attributeName, "tmi-sent-ts") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%13[^;]s", chatMessageStructPtr->tmi_sent_ts);
    } else if (strcmp(attributeName, "emote-only") == 0) {
      sscanf((cSplitPtr + strlen(attributeName) + 1), "%d", &(chatMessageStructPtr->is_emote_only));
    } else { /* default: */
      Serial.print("Unknown Message Attribute: ");
      Serial.println(cSplitPtr);
    }

    //Get next attribute
    attributeName[0] = 0;
    cSplitPtr = strtok(NULL, ";");
  }

  //Parse the users message
  char * findChatBegin = strstr(twitchChatMessage, (MESSAGE_ON_CONNECT_PREFIX SETTINGS_JOIN_CHANNEL_NAME " :"));
  if (findChatBegin) {
    char * beginUserMessage = strchr(findChatBegin, ':');
    if (beginUserMessage) {
      sscanf((beginUserMessage + 1), "%500c", chatMessageStructPtr->users_message);
      char * newLineChar = strchr(chatMessageStructPtr->users_message, '\n');
      if (newLineChar) {
        *newLineChar = 0;
      }
      chatMessageStructPtr->users_message[strlen((beginUserMessage + 1))] = 0;
    }
  }

  //Free up memory
  if (chatMessageCpy) {
    free(chatMessageCpy);
  }
}

void structToString(ChatMessage_t * chatMessageStructPtr) {
  Serial.println("------------------CHAT MESSAGE STRUCTURE------------------\n");
  Serial.print("Badges: ");
  Serial.println(chatMessageStructPtr->badges);
  Serial.print("Display Name: ");
  Serial.println(chatMessageStructPtr->display_name);
  Serial.print("Emotes: ");
  Serial.println(chatMessageStructPtr->emotes);
  Serial.print("Flags: ");
  Serial.println(chatMessageStructPtr->flags);
  Serial.print("User Type: ");
  Serial.println(chatMessageStructPtr->user_type);
  Serial.print("Badge Info: ");
  Serial.println(chatMessageStructPtr->badge_info);
  Serial.print("Color: ");
  Serial.println(chatMessageStructPtr->color);
  Serial.print("Message Id: ");
  Serial.println(chatMessageStructPtr->message_id);
  Serial.print("Room Id: ");
  Serial.println(chatMessageStructPtr->room_id);
  Serial.print("Time Sent TS: ");
  Serial.println(chatMessageStructPtr->tmi_sent_ts);
  Serial.print("User ID: ");
  Serial.println(chatMessageStructPtr->user_id);
  Serial.print("isTurbo: ");
  Serial.println(chatMessageStructPtr->is_turbo);
  Serial.print("isMod: ");
  Serial.println(chatMessageStructPtr->is_mod);
  Serial.print("isSubscriber: ");
  Serial.println(chatMessageStructPtr->is_subscriber);
  Serial.print("Users Message: ");
  Serial.println(chatMessageStructPtr->users_message);
  Serial.print("Message Type Id: ");
  Serial.println(chatMessageStructPtr->message_type_id);
  Serial.print("isEmoteOnly: ");
  Serial.println(chatMessageStructPtr->is_emote_only);
  Serial.print("isHighlightedMessage: ");
  Serial.println(chatMessageStructPtr->is_highlighted_message);
  Serial.print("Custom Reward Id: ");
  Serial.println(chatMessageStructPtr->custom_reward_id);
  Serial.println("----------------------------------------------------------\n");
}

void onMessageCallback(WebsocketsMessage message) {
  
  //Check For Ping/Pong
  if (message.data().indexOf("PING") > 0) {
    websocketClient.send("PONG :tmi.twitch.tv");
    Serial.println("PONGING Twitch");
  }

  //Parse Message
  parseChatMessage(&chatMessageStruct, (char *)message.data().c_str());

  //Check If Message Is New
  if (strcmp(chatMessageStruct.tmi_sent_ts, lastMessageTime) == 0)
  {
    Serial.println("Same Message Detected");
    return;
  } else 
  {
    strcpy(lastMessageTime, chatMessageStruct.tmi_sent_ts);
  }

  //Highlighted Message  
  if (chatMessageStruct.is_highlighted_message) {
    Serial.println("Found Highlighted Message");
    Serial.println(chatMessageStruct.users_message);
  }

  //Drink Reward
  if (strcmp(chatMessageStruct.custom_reward_id, DRINK_REWARD_ID) == 0) {    
    drinkBot_RemainingCycles++;
  }

  //Snack Reward
  if (strcmp(chatMessageStruct.custom_reward_id, SNACK_REWARD_ID) == 0) {
    snackBot_RemainingCycles++;
  }


    //Custom Reward Id
    Serial.print("Custom Reward Id:");
    Serial.println(chatMessageStruct.custom_reward_id);

  /* Debugging */
  structToString(&chatMessageStruct);
}

//-- Setup -----------------------------------------------------------
void setup() {
  //WiFi Connection
  connectToWifi(WIFI_SSID, WIFI_PASSWD);


  //Websocket / Twitch
  websocketClient.onMessage(onMessageCallback);  
  connectToTwitchWebSocket(&websocketClient);

  
  //SnackBot
  Wire.begin(sda, scl);
  pwm.begin();
  pwm.setPWMFreq(60); //ada fruit mentions 50hz
  yield();


  //DrinkBot
  pinMode(led, OUTPUT);
  FastLED.addLeds<WS2812B, LED_PIN, GRB>(leds, NUM_LEDS);
  Serial.begin(115200);
  FastLED.setBrightness(50);
  FastLED.clear(true);
    
}

//-- Main Loop -------------------------------------------------------
void loop() {

  //WebSocket
  if (websocketClient.available()) {
    websocketClient.poll();
  } else {
    //Websocket dropped for some reason??
    connectToTwitchWebSocket(&websocketClient);
  }
  
  SnackBot_Pick();
  DrinkBot_Fill();

}

//-- Snack Bot -------------------------------------------------------
void SnackBot_Pick() {

  if (snackBot_RemainingCycles > 0)
  {    
    snackBot_RemainingCycles--; //Decrement Cycle Count

    if (Axis_1_Angle >= 90)
    {
      for (Axis_1_Angle; Axis_1_Angle > 90; Axis_1_Angle--)// >90 decrease incremitally
      {
        delay(20); //delay 10th of second
        pwm.setPWM(0, 0, angleToPulse(Axis_1_Angle)); //
        Serial.print("Axis_1_Angle");
      }
    }

    if (Axis_1_Angle <= 90)
    {
      for (Axis_1_Angle; Axis_1_Angle < 90; Axis_1_Angle++)
      {
        delay(20);
        pwm.setPWM(0, 0, angleToPulse(Axis_1_Angle));
      }
    }


    if (Axis_2_Angle >= 40)
    {
      for (Axis_2_Angle; Axis_2_Angle > 40; Axis_2_Angle--)// >90 decrease incremitally
      {
        delay(20); //delay 10th of second
        pwm.setPWM(1, 0, angleToPulse(Axis_2_Angle)); //
        Serial.print("Axis_2_Angle");
      }
    }

    if (Axis_2_Angle <= 40)
    {
      for (Axis_2_Angle; Axis_2_Angle < 40; Axis_2_Angle++)
      {
        delay(20);
        pwm.setPWM(1, 0, angleToPulse(Axis_2_Angle));
      }
    }

    if (Axis_3_Angle >= 100)
    {
      for (Axis_3_Angle; Axis_3_Angle > 100; Axis_3_Angle--)// >90 decrease incremitally
      {
        delay(20); //delay 10th of second
        pwm.setPWM(2, 0, angleToPulse(Axis_3_Angle)); //
        Serial.print("Axis_2_Angle");
      }
    }

    if (Axis_3_Angle <= 100)
    {
      for (Axis_3_Angle; Axis_3_Angle < 100; Axis_3_Angle++)
      {
        delay(20);
        pwm.setPWM(2, 0, angleToPulse(Axis_3_Angle));
      }
    }

    if (Axis_4_Angle >= 80)
    {
      for (Axis_4_Angle; Axis_4_Angle > 80; Axis_4_Angle--)// >90 decrease incremitally
      {
        delay(30); //delay 10th of second
        pwm.setPWM(3, 0, angleToPulse(Axis_4_Angle)); //
        Serial.print("Axis_2_Angle");
      }
    }

    if (Axis_4_Angle <= 80)
    {
      for (Axis_4_Angle; Axis_4_Angle < 80; Axis_4_Angle++)
      {
        delay(30);
        pwm.setPWM(3, 0, angleToPulse(Axis_4_Angle));
      }
    }

    delay(500);
    if (Axis_5_Angle >= 0)
    {

      for (Axis_5_Angle; Axis_5_Angle > 0; Axis_5_Angle--)// >90 decrease incremitally
      {
        delay(30); //delay 10th of second
        pwm.setPWM(4, 0, angleToPulse(Axis_5_Angle)); //
        Serial.print("Axis_5_Angle");
      }
    }

    if (Axis_5_Angle <= 0)
    {
      for (Axis_5_Angle; Axis_5_Angle < 0; Axis_5_Angle++)
      {
        delay(30);
        pwm.setPWM(4, 0, angleToPulse(Axis_5_Angle));
      }
    }
    delay(1000);
    if (Axis_3_Angle >= 10)
    {
      for (Axis_3_Angle; Axis_3_Angle > 10; Axis_3_Angle--)// >90 decrease incremitally
      {
        delay(30); //delay 10th of second
        pwm.setPWM(2, 0, angleToPulse(Axis_3_Angle)); //
        Serial.print("Axis_3_Angle");
      }
    }

    if (Axis_3_Angle <= 10)
    {
      for (Axis_3_Angle; Axis_3_Angle < 10; Axis_3_Angle++)
      {
        delay(30);
        pwm.setPWM(2, 0, angleToPulse(Axis_3_Angle));
      }
    }

    if (Axis_1_Angle >= 180)
    {
      for (Axis_1_Angle; Axis_1_Angle > 180; Axis_1_Angle--)// >90 decrease incremitally
      {
        delay(20); //delay 10th of second
        pwm.setPWM(0, 0, angleToPulse(Axis_1_Angle)); //
        Serial.print("Axis_1_Angle");
      }
    }

    if (Axis_1_Angle <= 180)
    {
      for (Axis_1_Angle; Axis_1_Angle < 180; Axis_1_Angle++)
      {
        delay(20);
        pwm.setPWM(0, 0, angleToPulse(Axis_1_Angle));
      }
    }

    if (Axis_5_Angle >= 60)
    {
      for (Axis_5_Angle; Axis_5_Angle > 60; Axis_5_Angle --) // >90 decrease incremitally
      {
        delay(30);
        pwm.setPWM(4, 0, angleToPulse(Axis_5_Angle)); //
        Serial.print("Axis_5_Angle");
      }
    }

    if (Axis_5_Angle <= 60)
    {
      for (Axis_5_Angle; Axis_5_Angle < 60; Axis_5_Angle ++)
      {
        delay(30);
        pwm.setPWM(4, 0, angleToPulse(Axis_5_Angle));
      }
    }
    
    delay(2000);
    
    if (Axis_2_Angle >= 90)
    {
      for (Axis_2_Angle; Axis_2_Angle > 90; Axis_2_Angle--)// >90 decrease incremitally
      {
        delay(20); //delay 10th of second
        pwm.setPWM(1, 0, angleToPulse(Axis_2_Angle)); //
        Serial.print("Axis_2_Angle");
      }
    }

    if (Axis_2_Angle <= 90)
    {
      for (Axis_2_Angle; Axis_2_Angle < 90; Axis_2_Angle++)
      {
        delay(20);
        pwm.setPWM(1, 0, angleToPulse(Axis_2_Angle));
      }
    }

    if (Axis_3_Angle >= 90)
    {
      for (Axis_3_Angle; Axis_3_Angle > 90; Axis_3_Angle--)// >90 decrease incremitally
      {
        delay(20); //delay 10th of second
        pwm.setPWM(2, 0, angleToPulse(Axis_3_Angle)); //
        Serial.print("Axis_2_Angle");
      }
    }

    if (Axis_3_Angle <= 90)
    {
      for (Axis_3_Angle; Axis_3_Angle < 90  ; Axis_3_Angle++)
      {
        delay(20);
        pwm.setPWM(2, 0, angleToPulse(Axis_3_Angle));
      }
    }
    
    if (Axis_4_Angle >= 90)
    {
      for (Axis_4_Angle; Axis_4_Angle > 90; Axis_4_Angle--)// >90 decrease incremitally
      {
        delay(20); //delay 10th of second
        pwm.setPWM(3, 0, angleToPulse(Axis_4_Angle)); //
        Serial.print("Axis_2_Angle");
      }
    }

    if (Axis_4_Angle <= 90)
    {
      for (Axis_4_Angle; Axis_4_Angle < 90; Axis_4_Angle++)
      {
        delay(20);
        pwm.setPWM(3, 0, angleToPulse(Axis_4_Angle));
      }    
    }
  }
}


//-- Drink Bot -------------------------------------------------------
void DrinkBot_Fill() {

  if (drinkBot_RemainingCycles > 0)
  {    
    drinkBot_RemainingCycles--; //Decrement Cycle Count
    LED_Control(1);
      
    digitalWrite(led, HIGH);
    delay(20000);
    digitalWrite(led, LOW);
    delay(25);
    
    LED_Control(0);
  }
}

//-- LED's -------------------------------------------------------
void LED_Control(int state) {

  //LED's Off
  if (state == 0)
  {
    for(int i = NUM_LEDS; i >= 0 ; i--){
      leds[i] = CRGB::Black;
      FastLED.show();
      Serial.print(i); //debug
      Serial.println("Black");     
      delay(LED_Delay);      
    }
  }
  
  //LED's On
  if (state == 1)
  {
    for(int i = 0; i <= NUM_LEDS; i++){
      leds[i] = CRGB::Blue;
      FastLED.show();
      Serial.print(i); //debug
      Serial.println("Blue");      
      delay(LED_Delay);      
    }
  }
  
}
